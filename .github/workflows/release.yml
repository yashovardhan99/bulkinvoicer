# Release Workflow
# This workflow is used to create a release by updating the changelog,
# tagging the release, and publishing it to PyPI.
name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag for the release (e.g., v1.0.0)"
        required: true
      pre-release:
        description: "Is this a pre-release?"
        required: false
        default: false
        type: boolean
jobs:
  validate-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ github.event.inputs.version }}
      - name: Fail if tag exists
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "Tag already exists. Please use a different version."
          exit 1

  tag-and-release:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' }}
    permissions:
      contents: write
    needs: validate-tag
    steps:
      - name: Log Inputs
        run: |
          echo "Version: ${{ github.event.inputs.version }}"

      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.ACTIONS_BOT_APP_ID }}
          private-key: ${{ secrets.ACTIONS_BOT_PRIVATE_KEY }}

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Set up Git
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update Changelog
        run: |
          python .github/scripts/update_changelog.py $TAG
          git add CHANGELOG.md
          git commit -m "Update changelog for release $TAG"
          git push origin $BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.version }}
          BRANCH: ${{ github.ref_name }}

      - name: Create Tag
        run: |
          CHANGES=$(python .github/scripts/get_release_notes.py $TAG)
          git tag -a $TAG -m "$TAG" -m "$CHANGES" --cleanup=whitespace
          git push origin $TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.version }}

      - name: Create Regular release
        run: |
          gh release create $TAG --notes-from-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.version }}
        if: ${{ github.event.inputs.pre-release != 'true' }}

      - name: Create Pre-release
        run: |
          gh release create $TAG --notes-from-tag --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.version }}
        if: ${{ github.event.inputs.pre-release == 'true' }}

  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    needs:
      - validate-tag
      - tag-and-release
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ github.event.inputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install pypa/build
        run: >-
          python -m pip install build --user
      - name: Build a binary wheel and a source tarball
        run: python -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
      - build
      - tag-and-release
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/bulkinvoicer
    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-to-github:
    name: >-
      Upload distribution 📦 to GitHub
    needs:
      - build
      - tag-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write # to upload the distribution to the release
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Upload distribution 📦 to GitHub
        run: gh release upload $TAG $FILE --clobber --repo yashovardhan99/bulkinvoicer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.event.inputs.version }}
          FILE: dist/*.tar.gz dist/*.whl
